О точности языков

Недавно я в одном дружественном журнале увидел ремарку, объясняющую термин из предыдущей фразы. Типа:

<blockquote>
Элементарная логика (наука об общих законах развития объективного мира и познания) …

</blockquote>
только слово там было чуть позаковыристей. Деревянные игрушки тяжелого детства приучили меня к тому, что незнакомые слова можно смотреть в словаре. У меня даже электронного волка с яйцами не было, я развлекался исключительно картинками из Брокгауза, поэтому энциклопедия всегда была под рукой. В результате я бегло читаю на дореформенном и тяготею к переносу в активный словарный запас максимального количества малоупотребительных терминов. С ними речь становится не только сочнее, но и гораздо точнее. Мысль допускает меньшее количество толкований.

Внезапно понял, что эта черта характера сильно повлияла на мой стиль программирования. Я не терплю невнятности изложения мысли, зачастую принося в жертву мифическую «читаемость» кода. Чтобы не ходить далеко за примером: вчера потребовалось выполнить _разные_ действия в зависимости от того, с чего начинается строка. Нормальный человек не решает эту задачу перебором:

<pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="kw">if</span> str.start_with? <span class="st">&#39;a&#39;</span>
  puts <span class="st">&#39;String starts with “a”&#39;</span>
<span class="kw">elsif</span> str.start_with? <span class="st">&#39;b&#39;</span>
  puts <span class="st">&#39;String starts with “b”&#39;</span>
<span class="kw">else</span>
  raise <span class="st">&#39;Shit happens!&#39;</span>
<span class="kw">end</span></code></pre>
Я имею в виду, что в реальной жизни мы не станем проверять, а не ананас ли перед нами, увидев скорпиона. Цепочка рассуждений выглядит так: «скорпион ⇒ бежать!» а не «если ананас — съесть, если скорпион — убегать». Надеюсь, это очевидно.

Поэтому мой вариант решения этой задачи оказался вот таким:

<pre class="sourceCode ruby"><code class="sourceCode ruby">  _start_with = lambda { |sample, string| string.start_with? sample }

  <span class="kw">case</span> string
  <span class="kw">when</span> _start_with.curry[<span class="st">&#39;a&#39;</span>] <span class="kw">then</span> puts <span class="st">&#39;String starts with “a”&#39;</span>
  <span class="kw">when</span> _start_with.curry[<span class="st">&#39;b&#39;</span>] <span class="kw">then</span> puts <span class="st">&#39;String starts with “b”&#39;</span>
  <span class="kw">else</span> raise <span class="st">&#39;Shit happens!&#39;</span>
  <span class="kw">end</span></code></pre>
Так и вижу толпу пуристов с копьями, которые хотят меня распять на шарпе. Попытаюсь объяснить. Второй вариант, наверное, потребует на три миллисекунды больше, чтобы понять, что хотел сказать автор. Но как только понимание пришло, оно уже никуда не денется. В этом коде не запутаешься. Тут проложены только те пути, которые соответствуют задаче: глазами пробежал по дорожке «string ⇒ 'a' ⇒ puts “a”» и все.

В продакшене в реальном времени так писать, разумеется, нельзя (бенчмарки показывают, что мой вариант в 20 раз медленнее, и я знаю это). На научно-популярных лекциях тоже неразумно злоупотреблять терминами из приложения к основному словарю. Но если целью является чистота и внятность кода (речи), а такое, поверьте мне, бывает гораздо чаще, чем кажется — я буду использовать весь доступный мне арсенал. Такие мелочи иногда очень помогают быстро ухватить нюансы. Протагонист — это гораздо больше, чем главный герой, если вы вдруг писали выпускное сочинение по Зюскинду.

Я вообще нахожу неестественным предложение «быть проще, ибо люди потянутся». Прошу считать социопатом.
