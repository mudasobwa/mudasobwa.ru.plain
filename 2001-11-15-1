Монолитные модули

§3 Вам куском, или нарезать?

У одной монеты — две стороны. Любая палка — о двух концах. Все проблемы имеют как минимум два решения.

Если бы я задался целью классифицировать типы этих решений — мне быхватило двух слов — по одному на каждый тип. _Монолитный_ и _модульный_. Программистам наверняка известно, что ядро операционнойсистемы _Microsoft Windows_ — имеет монолитную структуру, в то время, как ядро _Linux_ — модульнуго типа. Роман с точки зренияиздателя — монолитен, сборник рассказов — напротив —является модульным решением (в том, хотя бы, смысле, что неудачные тридцатьстраниц из середины романа могут привести к необходимости переписать романцеликом; неудачный же рассказ в тридцать страниц — можно просто заменитьна другой, не притрагиваясь к содержимому остальных. В то же время, неудачныетридцать страниц романа — простительны автору, а неудачный рассказ можетпривести к полной потере читателя). Дубовый шкаф отличается по тем же признакамот конструкторов «Сделай Сам» производства _IKEA_. Плюсы и минусы обоихвариантов — очевидны и трехлетнему ребенку.

Монолитные решения, как правило, характеризуются внешней добротностью,фешенебельностью и производят впечатление _отделки в стиле «ампир»_.Результат применения модульного дизайна — как правило, удобнее в быту, легче при перевозке и лучше приспособлен к обновлениям. Впрочем, такого типаприобретением не станешь хвастаться зажиточному соседу.

Наконец, килограмм колбасы куском — дольше сохранится свежим;однако нарезка гораздо удобнее во многих житейских ситуациях, право перечислитькоторые я предоставлю читателю.

§3 Patch (англ.) — заплата, лоскут

Сразу оговорюсь, я являюсь адептом модульных решений. Поэтому мои словамогут быть во многом пристрастны и несправедливы.

Я убежден, что в мире нет программиста, способного написатьработоспособный код сколь угодно малого объема без ошибок. Алгоритм Эвклида исортировка пузырьком — подвержены проникновению багов не меньше, чемнелинейное восстановление Сэммона или даже интепретирование регулярных выражений. Дайте любому программисту месяц на решение какой-нибудь нерешаемойзадачи, и на двадцать девятый день он принесет «вполне работоспособное» решение,оставив, впрочем, себе пару дней на то, чтобы «пофиксить баги», которые найдетевы. Дайте этому же персонажу десять минут на кодирование утилиты «Hello,World!» — и на девятой минуте дверь вашего кабинета распахнется, ирадостный программист принесет исполнимый файл, который будет печатать этухрестоматийную околесицу без завершающего перевода каретки, превращая приглашение командной строки в оптимистичное:

`Hello, World![am@localhost /home/am]$`

Попеняйте ему, и он умчится доделывать, недовольно бурча себе под носвсякую нецензурщину. И доделает, и уложится в одиннадцать с половиной минут, иникому не придет в голову ругать его за это ничтожное отклонение от графика.

Так вот. Принимая во внимание тот факт, что любое ПО создается такими вотразгильдяями — необходимо иметь возможность быстро починить что-товнезапно отказавшее. В модульном приложении это сделать несоизмеримо проще. Какминимум, есть гарантия, что результатом починки одного мини-бага не станетпривнесение двадцати пяти новых.

§3 И обработать напильником...

Мне однажды довелось разговаривать с человеком, который расписывалмне преимущества _Internet Explorer_'а перед остальными браузерами, вчастности — перед _Mozilla_. Он пылко и со знанием дела говорил минут десять. Я не знал, что и возразить; от немедленного перехода на это чудоинженерной мысли меня спасло только отсутствие в пределах видимости подходящих операционных систем. Он меня убедил тогда, клянусь.

На следующий день меня разбудил телефонный звонок. Этот пламенныйпоклонник _Explorer_'а установил себе, таки, _Mozilla_ —просто для ознакомления. А потом зашел на страничку плагинов... Всю ночь онразвлекался установкой разных гуглебаров и таббедсорчей (траскрипция ориг.), ав начале девятого утра следующего дня — позвонил мне, чтобы обрадоватьследующим известием: _Mozilla_ — рулезз форева.

К чему я это? Да к тому, что заточка под свои вкусы и нужды модульногоприложения — занятие гораздо менее утомительное, нежели чем конфигурациямонолитного монстра. Кроме того, сами модули, конечно, при условии грамотнодокументированных интерфейсов, может писать человек, совершенно не разбирающийсяв тонкостях функционирования всего приложения в целом.

Известный благодаря Лу Гринзоу «синдром небрежных DLL» — речь идето упаковывании всего «плохого» кода в динамически связываемую библиотеку,— с призрачным намерением когда-нибудь, потом, переписать и отладить — этогоже поля ягода. И если не принимать во внимание тот факт, что никто и никогда непереписывает небрежный код, «отложенный на время в DLL» — такоебизнес-решение — тоже пример превосходства модуляризации надмонолитностью.

§3 Тридцать три богатыря

Наконец, умение работать в команде — искусство гораздо менеераспространенное среди программистов, чем принято полагать. По правде говоря,никто не умеет работать в команде в полной мере. На 99% — да, умеют,очень немногие, но умеют. Но стопроцентного растворения в коллективе,образования единого целого — лично мне повидать не удалось. Крометого, уровень программистов не всегда одинаков. И разбиение проекта на модули,определение интерфейсов взаимодействия и перепоручение каждого отдельно взятогомодуля — отдельно взятому персонажу,— позволит, вероятно, избежатьмножества ошибок, вызванных рассогласованностью действий, перетягиванием одеялаи различиями в основных концепциях кодирования.

В конце концов, даже стиль комментариев, положение закрывающих скобок иорганизация бесконечных циклов ( vs. ) — будет единым хотя бы внутри модуля.

И, наконец, самое главное: ненужные модули можно отключать.

А нужные — подключать.

И работать с тем набором функциональности, который требуется пользователю,а не с тем, что был спроектирован полоумным разработчиком. Мне это важно.

Никто, кстати, не в курсе, что такое Xtreem Programming?!

Всем загрузить модуль выгрузки монолитного ядра!