Что общего между велосипедом и вечным двигателем?

§3 Размножение сущностей

Как все недоучки, я учился программировать непосредственно на первомзаказе. Не могу с уверенностью сказать, что я чему-то научился; тем не менеепуть наименьшего сопротивления прельстил меня полностью. Разумеется, я выбрал_Borland Delphi_ в качестве инструмента разработки. Алгоритмизацией ябаловался с пятого класса средней школы, алгоритм Эвклида на фортране былнаписан и даже — успешно отлажен на _EC-1080_. Если я ничего непутаю. Перфокарты с итоговым вариантом я бережно храню до сих пор. Впрочем, яотвлекся.

Пугало меня создание пользовательского интерфейса. Формочки, кнопочки, менюшки, тулбарчики. Я совершенно не представлял себе, с какойстороны можно ко всему этому подойти. Поэтому я выбрал — _Delphi_.Втуне надеясь, что грамотный _RAD_ решит за меня все проблемы, связанныес созданием окошечек и прочих мулечек. Это была, если не ошибаюсь, втораяверсия.

Достаточно быстро справившись с алгоритмизацией, я занялся проектированиеминтерфейса. Потырил нехитрым способом (_Alt+PrintScreen_) иконки из какого-то _Microsoft_'овского монстра и открыл редактор форм. Я собирался следовать рекомендациям профессионалов, поэтому потратил некоторое время на тщательное дублирование пунктов меню — кнопками в тулбаре. Многие помнят, как впервых версиях _Delphi_ был реализован интерфейс добавления событий.Выбираешь кнопочку, либо пункт меню, щелкаешь по ней дважды — и кусочек кодаобработчика события нажатия кнопки готов. По неопытности (ну да, вообще-то — поглупости) я старался вносить минимальные исправления в сгенерированный код.Одним из наиболее свежих моих воспоминаний на тот момент была попытка реанимацииредактора форм в _MS Visual Studio_ после ручной правки нагенерированногомастером шаблонов мусора. И я старательно эксплуатировал великую технологию — написав код обработчика нажатия кнопки, я копировалего в обработчик соответствующего пункта меню. Я надеюсь, не нужно объяснять,чем чреват такой подход.

Я, очевидно, был не единственный в когорте недоумков, плодивших сущноститакого толка. Иначе сложно объяснить появление эзотерических объектов типа в последующих версиях _Delphi_. Разработчики ввелилишнюю, по сути, сущность — намеренно создав узкое место для нерадивых программистов. Допустить ошибку рассинхронизации кода обработки кнопок и менюстало гораздо сложнее.

§3 Один на один!

Вообще говоря, тема корректного позиционирования событий относительно осидействий пользователя — очень больной вопрос для многих программистов. Самый,пожалуй, яркий пример здесь — элемент управления типа _CheckBox_,отражающий состояния бинарного типа (да/нет). Я сделал десятки глупейших ошибокв коде, заводя дополнительную переменную для хранения самого значения. Ведьконтент должен быть отделен от оформления, не так ли? Так, да не совсем.Стандартными средствами языков _Pascal_ и _C++_, к великомусожалению, не обеспечить безопасное разделение. Заведите переменную, отдельно отфлажка на форме — и через неделю показания флажка и значения переменнойрассинхронизуются в какой-нибудь экзотической ситуации.

_Хорошая новость:_ средствами _Java_ — обеспечить механизм разделения можно. Я часто говорю, что одним из основных преимуществ этого языка я считаю модель _Listener_'ов. Все до безобразия просто — нажатие мышкой на флажок напрямую меняет значение внутренней переменной; сам флажок — регистрируется «слушателем» и получает извещения обо всех изменениях, происходящих с переменной, будь то скрытая установка значения из кода, чтение из файла, или даже щелчок по другому связанному с переменной флажку в соседнем окне.

Сплошное торжество здравого смысла — теперь у нас есть одна переменная,сколько угодно ее визуальных представлений; вдобавок мы практически застрахованыот рассинхронизации. Можно провозгласить какой-нибудь лозунг и со спокойной совестью отправиться на обед.

§4 Сущность описывающая живущий во времени объект —  
 это _Persistent_-класс, подключающий _Listener_'ы.  
 Сущность описывающая моментальное действие —  
 это _Listener_-класс, как правило — имеющий визуализатор.

Разумеется, оба класса должны уметь каскадно встраиваться друг в друга(объекты обоих типов могут содержать объекты первого типа в соотношении_«one-to-many»_, при этом первый тип должен уметь вызыватьсоответствующие _Listener_'ы на сыновьях, а второй — при случае корректноотрисовать не только себя, но и всех дочерей).

§3 Великие изобретатели.

Именно из вышеизложенных соображений я всегда предпочитаю воспользоватьсятретьесторонней библиотекой, а не писать свою. При условии, что мне знакомо имяпроизводителя этой библиотеки, проект развивается и есть возможностьего протестировать. Даже, если эта библиотека не охватывает всех моих нужд. Причина проста: я буду выступать _Listener_'ом у той компании, я будупросто немного адаптировать свой код в соответствии с развитием библиотеки. Еслисейчас кажется, что переписать эту хрень — дело двух рабочих дней, то завтраситуация неизбежно изменится. И я столкнусь с необходимостью поддерживать своюпрограмму и _библиотеку_. Помните, раньше каждый считал своим долгомнаписать собственную программу инсталляции? Тех, кто поддался этому соблазну и не пошел «на поводу» у славных ребят из _Wise_ и/или _InstallShield_ — с выходом каждой очередной версии _Windows_ — ждут бессонные ночи ирасшатанные нервы.

Поэтому я, скрепя сердце, пользуюсь стандартными элементами управления,стандартными средствами визуализации, стандартной формой окон и стандартноймаркой сигарет. По крайней мере, при таком раскладе мне не придется рвать наголове волосы, когда разработчики _Longhorn_'а скажут: «с сегодняшнегодня все окна нужно делать круглыми».

NB! Следующий абзац на данный момент устарел :-( Последний пример, который мне хочется привести — касается поиска по сайту.Я его недавно прикручивал. И понял вот что: не нужно поддаваться соблазну и,например, парсить ответ Google, чтобы показать результаты в том же стиле, вкотором оформлен сайт. Я не хочу оказаться у разбитого корыта, и даже не узнатьоб этом (а я — ага,— достаточно редко хожу к себе на сайт), когда разработчики этойпрекрасной во всех отношениях поисковой машины по ту сторону океана решатоснастить страницу дополнительным тегом. Кроме того, я не хочу скрывать, чтопоиск по моему сайту за меня выполняет Google. Я им признателен и вообще.Поэтому я сделал вот как:

`form name="googlesearch" method="get"  
 action="http://www.google.com/search"  
 onSubmit="if (q.value == '') return false;  
 q.value = q.value + ' site:www.matiouchkine.de';  
  return true;`

Потратив на это две минуты и будучи абсолютно уверенным, что меня не ждутнеприятные неожиданности в будущем.

И да, я знаю про  Google APIs (http://www.google.com/apis/)  . Только вот нужна ли мне эта пушка для стрельбы поредкозалетающим воробьям? Мне кажется, нет.

А сэкономленное таким нехитрым способом время я потратил на написание этойстатейки.

Все стремятся изобрести велосипед и вечный двигатель.