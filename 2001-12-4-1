Вот в таком аспекте

§3 Все переписать!

В девяносто девятом, если не ошибаюсь, году, ко мне на поклон пришел мой хороший знакомый. Я, кажется, пользовался у него репутацией сведущегопрограммиста. Если бы мы не были знакомы со школьных времен, он, вероятно,обращался бы ко мне «гуру». Он нуждался в моей помощи. Программа, котораяработала у них в офисе со времен царя Соломона, перестала справляться с темобъемом данных, который в нее пытались запихивать. Так иногда бывает.

Я моментально согласился помочь, и переписать софтину. Техническое заданиепоказалось мне очень прозрачным. Пара таблиц, минимум связей, выкристализованнаянапрямую постановкой задачи реляционная модель. Единственное, что оставалосьсделать мне — выработать интерфейс и реализовать все это. Я подошел кзадаче творчески. Мне очень хотелось порадовать моего знакомого (на самом деле,он тоже пытался подвизаться в программировании, и мне хотелось его не столькопорадовать, сколько продемонстрировать собственную крутизну). Критичным моментоминтерфейса была скорость ввода данных. Точно не помню, но, кажется, эта формочкадолжна была заполняться в реальном времени в режиме телефонного разговора склиентом. Как-то так.

Я за день нарисовал базу данных и прикрутил к ней простенькое _среднеезвено_ (стандартный библиотечный набор функций для прозрачного обращения к базе данных; заказчик не определился с выбором СУБД, и я, насколько мог,облегчил ему процесс последующей вероятной миграции). Настала очередьинтерфейсного окна. Я ходил вокруг компьютера кругами, медитируя и анализируя.Мне очень хотелось сделать шедевр. Тогда я еще не знал, что все гениальное — просто, а изобретение велосипедов — не является кратчайшим путемк славе. Наконец, я определился.

По всем законам оборудования АРМ, почерпнутым из умных книжек на вражескомязыке, я увешал каждое поле ввода шорткатами и выделил критичные поля вводацветом,— неброским, но заметным. Я трижды проверил _Tab-order_,тщательно продумал структуру меню (в котором и было-то не более десяти пунктов),продублировал меню тулбаром, нарисовал интуитивно-понятные иконки и снабдилими каждый пункт меню, соответствующую кнопку на тулбаре и поле ввода, еслимежду ними существовала хоть какая-то связь.Вокруг каждого поля ввода была еле заметная рамка, окружающая само поле, метку сего названием, иконку и некоторую область вокруг. Достаточно было ткнуть мышкой в любом месте внутри этой рамки, и поле ввода получало фокус. Яработал почти неделю, по шестнадцать часов в сутки, и я сделал действительноконфетку. Еще день я гонял всяческие тесты. Я вводил буквы в поле суммы,неправильные даты, мой _BoundsChecker_, если бы он мог говорить,взмолился бы о пощаде и потребовал сверхурочные. Наконец, я был готов к показу.

Показ состоялся на следующий день. Я, кажется, сумел произвестивпечатление на их штатного программиста. Что касается операционисток, радикоторых все это и затевалось, я провалился совершенно. Я так и не смог сдатьэтот заказ. Получил небольшие отступные и бормоча себе под нос мантру предания анафеме по-язычески, удалился.

Как выяснилось, я не учел одного. Операционистки привыкли работать состарой программой. Там поле ввода дополнительной информации получало фокус по  (sic!), а клавиша  — использовалась для проверки введенных данных. Сохранение записи собственно в базе, разумеется,осуществлялось по  . Несчастные операционистки, справившисьхудо-бедно со вводом фамилии, вводили дату заказа, и автоматически остервенело били по ничем не виноватому  'у, потому что их старая программамогла уже при сохранении записи ругнуться на неверный ввод и зависнуть. Моизаверения в том, что ввод проверяется на лету, и «вот же! подсвечиваетсякрасненьким, если что» — лишь придавали им уверенности в том, что всепрограммисты — ненормальные, и единственной своей целью видят выжить их,бедных и несчастных, с их рабочих мест. Справившись с вводом даты, ираскрасневшись от боязни предстать перед начальником идиотками, они старательнопытались ввести дополнительную информацию — посредством нажатия клавиши .

Как реагировала моя программа на  и  ,полагаю, рассказывать не нужно.

Спустя несколько дней, поостынув и продумав все, что я хотел бы сказатьоперационисткам и их ближайшим родственникам, я понял очень простую вещь: чтобыуспешно продать эту программу мне нужно было перед проектированием интерфейсачасок поиграться с их старым монстром. Всего-то и делов — перехватить пару клавиш. И я был бы королем — если бы не мое страстное желаниеизобрести велосипед.

§3 С сегодняшнего дня мы...

Другое частое проявление идиотизма — в этом случае, как правило, состороны руководства — попытка за день перевести весь офис на новый софт.Будь то новая операционная система, новый офисный пакет, новая система обменасообщениями. Новый системный администратор — самое большое зло, какоеможет случиться в фирме. Нет, я ничего не имею против системных администраторов.Они все как один — милейшие люди, и если вам не с кем выпить пива,— системщик незаменим. К сожалению, у каждого из них ограниченныйв силу объективных причин кругозор. Поэтому вероятность того, что пересечениепристрастий уволенного вчера и только принятого на работу админа окажетсяненулевым множеством — исчезающе мала. А так как авторитет этих людейнепререкаем, неизбежна миграция с сервера _WinNT_ — на_Linux_ («Уму не постижимо, как это все работало! А безопасность?Ужас!»), с _MySQL_ — на _Interbase_ («_OpenSource_,конечно же, рулит, но там же нет транзакций!»), с _IIS_ — на _Apache_ («Он проще в конфигурации и поддерживает _PHP_»).Разумеется, меняется _Proxy_ и политика доступа в интернет. Если Аськабыла разрешена — ее запрещают. Была запрещена — разрешают.Все эти фразы можно перевести на русский литературный язык, и звучать они будут так: с тем, что у вас тут поустановлено, я работать не умею, а учиться — не хочу. И вот уже всем в офисе принудительно сносят _Outlook_, и заменяют на _TheBat!_, потому что вирусы. Вместо _MSWord_ появляется _OpenOffice_ (если фантазия администратора небогата, то по тем же причинам). Всем ставится _FAR_ (учитесь, идиоты).

В результате сеть начинает работать с перебоями, потому что уровеньбезопасности слишком высок, и в локальной сети за брандмауэром проверяются всемак-адреса, а авторизация требуется по каждому запросу. В фирме, имеющейотношение к полиграфическому бизнесу вместе с баннерами безжалостно вырезаются все до единой картинки и фотографии. Вместе с доступом к порносайтам закрываетсяи доступ к новостным лентам профессионального характера. Вместе с _ICQ_отрезается _SSL_ к заказчику и _FTP_ к собственному сайту.

Чтобы со всей этой херней взлететь, требуется в лучшем случае неделя.

Эту проблему я называю «болезнь пристрастий». Программисты болеют ей не вменьшей степени. «Как?! У вас сайт на перле? Это прошлый век! Я все перепишу на_PHP_». «База под _MySQL_? Да это все завтра навернется, тутнужен, как минимум, _Oracle_» (эту фразу, кстати, я слышал собственнымиушами, и я до сих пор терзаюсь, почему я не спросил, а что же тогда — как максимум?). Всем это знакомо. Мне очень редко встречались люди, которыепонимают, чем отличается создание нового проекта от поддержки старого. Я сейчасскажу крамольную фразу, можете кидать в меня камнями.

§4 Если вот этот кусок, написанный, пьяным безграмотным  
 дебилом на КОБОЛе в самом сердце программы на  
 ЛИСПе работает — отойди, и ничего не трогай!

А если вам все же втемяшится его оптимизировать и переписать — переписывать его нужно на ЛИСПе, а не на кроссплатформенной _Java_,производительном _C++_ или удобном и строго типизированном _Pascal_. Хотя бы из уважения к тому, кто этот код будет поддерживатьпосле вас.

§3 Несколько советов

Я тут, собственно, чего распинаюсь. Есть простой и практически идеальныйспособ решения проблемы поддержки, сопровождения и расширения существующихпрограммных продуктов, сайтов, технологий. Он же — путь наименьшегосопротивления. Ничего не менять, если есть таковая возможность. Ничего ненарушать своими добавлениями и улучшениями в работе существующих частей, пустьдаже и — в ущерб производительности. Не добавлять ничего такого, что нетребуется на данный момент (не выпуская, впрочем, из головы возможности добавить_это_ по первому требованию). Не стремиться к совершенству,супермасштабируемости, суперпроизводительности и суперудобству использования.Правильное решение — всегда находится где-то посередине.

Ничего, что я заговорил трюизмами?

Совсем недавно мне пришлось озаботиться проблемой защиты собственнойпереписки. Электронной подписью. И даже криптованием. С криптованием, понятно,все просто. Зашифрованные письма ходят между двумя людьми, которые договорилисьоб этом заранее — и загодя обменялись своими открытыми ключами. Мне же,по большому счету, было важно не это. От моего имени стали посылать письма черезоткрытые реле, и я посчитал целесообразным подписывать все мало-мальски значимыеисходящие сообщения. И немедленно лицом к лицу столкнулся с проблемойобнародования своего открытого ключа. Ну не цеплять же его в конец каждогописьма, в самом деле.

Изящное, на мой взгляд, решение пришло мне в голову достаточно быстро.Берем правильного почтового клиента, который умеет добавлять свои элементы в заголовки исходящей почты. Добавляем вот что:

•  http://www.matiouchkine.de/gpg/matiouchkine.pub.key (http://mudasobwa.ru/gpg/matiouchkine.pub.key)  
•  by:  GnuPG ver 1.2.3 (http://www.gnupg.org)  
 •  by:  a href="mailto:am@mudasobwa.ru" name="Key  owner" title="Key owner"Alexei Matiouchkine

Voilà.

Именно принцип «не мешать тому что работает» очень грамотно вписывается вконцепцию _AOP_ — _Aspect Oriented Programming_. Аспектноепрограммирование, применительно к поддержке продукта, снижает (по-английски я бынаписал _`dramatically decreases`_) возможность привнести новую ошибку вуже отлаженный код.

Я, собственно, только сейчас понял, зачем я затеял эту статью. Чтобынаписать ключевую завершающую фразу.

Ориентированное на аспекты программирование рулит!